{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/devices/devices.component.ts","./src/app/devices/devices.component.html","./src/app/devices/show-dev/show-dev.component.ts","./src/app/devices/show-dev/show-dev.component.html","./src/app/shared.service.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA0C;;;;AAOnC,MAAM,YAAY;IALzB;QAME,UAAK,GAAG,gBAAgB,CAAC;KAC1B;;wEAFY,YAAY;4FAAZ,YAAY;QCNzB,yEACE;QAAA,wEAA2C;QAAA,sFAA0B;QAAA,4DAAK;QAC1E,wEAA0C;QAAA,4EAAiB;QAAA,4DAAK;QAChE,yEACE;QAAA,wEACE;QAAA,wEACE;QAAA,4EAAiF;QAAA,kEAAO;QAAA,4DAAS;QACnG,4DAAK;QACP,4DAAK;QACP,4DAAM;QACN,4EAA+B;QACjC,4DAAM;;6FDLO,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACjB;AACe;AACT;AACgB;AACU;AAExB;AAEO;AACS;AACV;;AAmBhD,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,CAAC,6DAAa,CAAC,YARjB;YACP,uEAAa;YACb,oEAAgB;YAChB,qEAAgB;YAChB,0DAAW;YACX,kEAAmB;YACnB,oEAAS;SACV;mIAIU,SAAS,mBAflB,2DAAY;QACZ,2EAAgB;QAChB,qFAAgB,aAGhB,uEAAa;QACb,oEAAgB;QAChB,qEAAgB;QAChB,0DAAW;QACX,kEAAmB;QACnB,oEAAS;6FAKA,SAAS;cAjBrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,2EAAgB;oBAChB,qFAAgB;iBACjB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,oEAAgB;oBAChB,qEAAgB;oBAChB,0DAAW;oBACX,kEAAmB;oBACnB,oEAAS;iBACV;gBACD,SAAS,EAAE,CAAC,6DAAa,CAAC;gBAC1B,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AC7BD;AAAA;AAAA;AAAA;AAAkD;;;AAO3C,MAAM,gBAAgB;IAE3B,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;gFALU,gBAAgB;gGAAhB,gBAAgB;QCP7B,0EAA6B;;6FDOhB,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,0BAA0B;gBACvC,SAAS,EAAE,CAAC,yBAAyB,CAAC;aACvC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAkD;;;;;;ICyC1C,qEACI;IAAA,qEAAI;IAAA,uDAAqB;IAAA,4DAAK;IAC9B,qEAAI;IAAA,uDAAmB;IAAA,4DAAK;IAC5B,qEACI;IAAA,4EAII;IAFJ,0WAAqC;IAEjC,0EACJ;IAAA,4DAAS;IACb,4DAAK;IACT,4DAAK;;;IAVG,0DAAqB;IAArB,qFAAqB;IACrB,0DAAmB;IAAnB,mFAAmB;;ADjC5B,MAAM,gBAAgB;IAG3B,YAAqB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;QAE3C,eAAU,GAAgB,EAAE,CAAE;IAFiB,CAAC;IAGhD,kCAAkC;IAClC,QAAQ;QACN,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,mBAAmB;IACnB,wCAAwC;IACxC,8BAA8B;IAC9B,QAAQ;IACR,IAAI;IACJ,aAAa;QACb,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,MAAM,GAAE;YAC1C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IACH,mBAAmB;IACnB,kDAAkD;IAClD,OAAO;IAEL,QAAQ;QACN,4BAA4B;QAC5B,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,UAAU;IAEV,CAAC;IACD,iBAAiB,CAAC,MAAM;QACtB,4BAA4B;QAE5B,kDAAkD;QAClD,mBAAmB;QACnB,MAAM;QAEN,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,GAAG,GAAE;YACjD,IAAG,GAAG,IAAI,IAAI,EACd;gBACA,KAAK,CAAC,4EAA4E,CAAC,CAAC;aACnF;iBAED;gBACE,KAAK,CAAC,uBAAuB,CAAC,CAAC;aAChC;QACH,CAAC,CAAC;YACF,KAAK,CAAC,EAAE,GAAE,OAAO,CAAC,GAAG,CAAC,KAAK,EAAC,KAAK,CAAC,GAAC;QACnC,6CAA6C;QAC7C,mBAAmB;QACnB,MAAM;IACR,CAAC;;gFAtDQ,gBAAgB;gGAAhB,gBAAgB;QCT7B,4EAII;QAFJ,wIAAS,cAAU,IAAC;QAEhB,oEACF;QAAA,4DAAS;QA2BX,2EACI;QAAA,wEACI;QAAA,qEACI;QAAA,qEAAI;QAAA,oEAAS;QAAA,4DAAK;QAClB,qEAAI;QAAA,iEAAM;QAAA,4DAAK;QACnB,4DAAK;QACT,4DAAQ;QACR,wEACI;QAAA,4GACI;QAWR,4DAAQ;QACZ,4DAAQ;;QAbI,2DAAmC;QAAnC,mFAAmC;;6FD/BlC,gBAAgB;cAL5B,uDAAS;eAAC;gBACT,QAAQ,EAAE,cAAc;gBACxB,WAAW,EAAE,2BAA2B;gBACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;aACxC;;;;;;;;;;;;;;AETD;AAAA;AAAA;AAAA;AAAA;AAA2C;AACmD;AAChD;;;AAO9C,qBAAqB;AACrB,uBAAuB;AACvB,mBAAmB;AACnB,IAAI;AAEG,MAAM,aAAa;IAiBxB,YAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAfnC,wBAAwB;QACxB,qBAAqB;QACrB,kBAAkB;QAClB,KAAK;QAEL,2BAA2B;QAC3B,iDAAiD;QACjD,iDAAiD;QACjD,iDAAiD;QACjD,iDAAiD;QACjD,gDAAgD;QAChD,MAAM;QAER,mDAAmD;QAC1C,WAAM,GAAG,6BAA6B,CAAC;IACP,CAAC;IAEhC,WAAW,CAAC,KAAwB;QAC1C,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,kEAAkE;YAClE,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1D;aAAM;YACL,sDAAsD;YACtD,6DAA6D;YAC7D,OAAO,CAAC,KAAK,CACX,yBAAyB,KAAK,CAAC,MAAM,IAAI;gBACzC,aAAa,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;SAC/B;QACD,yDAAyD;QACzD,OAAO,uDAAU,CACf,iDAAiD,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,KAAS;QAEZ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,MAAM,GAAC,sBAAsB,EAAC,KAAK,EACnE;YACE,OAAO,EAAC,IAAI,gEAAW,CAAC,EAAC,cAAc,EAAC,kBAAkB,EAAC,CAAC;SAC7D,CAAC,CAAC;IACR,CAAC;IAED,cAAc,CAAC,GAAY;QAEvB,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,IAAI,gEAAW,CAAC;gBACvB,cAAc,EAAG,kBAAkB;aACpC,CAAC;SACH,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAM,IAAI,CAAC,MAAM,GAAC,uBAAuB,EAAE,GAAG,EAAC,WAAW,CAAC,CAAC;QACjF,iFAAiF;IACnF,CAAC;IACD,6CAA6C;IAE7C,0BAA0B;IAC1B,iCAAiC;IACjC,4CAA4C;IAC5C,SAAS;IACT,OAAO;IACP,sCAAsC;IACtC,0DAA0D;IAE1D,4DAA4D;IAC5D,gGAAgG;IAChG,2DAA2D;IAC3D,+DAA+D;IAC/D,cAAc;IACd,uDAAuD;IACvD,UAAU;IAEV,+EAA+E;IAC/E,wHAAwH;IACxH,gBAAgB;IAChB,IAAI;IACJ,oDAAoD;IACpD,+EAA+E;IAC/E,sCAAsC;IACtC,mBAAmB;IACnB,sBAAsB;IACtB,yDAAyD;IACzD,kFAAkF;IAClF,gBAAgB;IAChB,IAAI;IAEJ,8BAA8B;IAC9B,uDAAuD;IACvD,cAAc;IACd,IAAI;IAEJ,UAAU;QAER,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAM,IAAI,CAAC,MAAM,GAAC,YAAY,CAAC,CAAC;QACpD,sBAAsB;IACxB,CAAC;;0EA9FU,aAAa;gGAAb,aAAa,WAAb,aAAa,mBAPZ,MAAM;6FAOP,aAAa;cARzB,wDAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;;;;;;;;;;;ACRD;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AAEO;;;AAE9D,MAAM,MAAM,GAAW;IACrB,EAAC,IAAI,EAAG,QAAQ,EAAE,SAAS,EAAE,2EAAgB,EAAC;CAC/C,CAAC;AAMK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAHlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAEX,gBAAgB,uFAFjB,4DAAY;6FAEX,gBAAgB;cAJ5B,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACZD;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'DeviceFrontEnd';\n}\n","<!-- <h2>Hello World !!</h2> -->\n<div class=\"container\">\n  <h3 class=\"d-flex justify-content-center\"> Angular 10, Front end Demo</h3>\n  <h5 class=\"d-flex justify-content-center\">Device Management</h5>\n  <nav class=\"navbar navbar-expand-sm bg-light navbar-dark\">\n    <ul class=\"navbar-nav\">\n      <li class=\"nav-item\">\n        <button routerLink=\"device\" class=\"m-1 btn btn-light btn-outline-primary\" Button>Devices</button>\n      </li>\n    </ul>\n  </nav>\n  <router-outlet></router-outlet>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { DevicesComponent } from './devices/devices.component';\nimport { ShowDevComponent } from './devices/show-dev/show-dev.component';\n\nimport { SharedService } from './shared.service';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DevicesComponent,\n    ShowDevComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbModule,\n  ],\n  providers: [SharedService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-devices',\n  templateUrl: './devices.component.html',\n  styleUrls: ['./devices.component.css']\n})\nexport class DevicesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<app-show-dev></app-show-dev>","import { Component, OnInit } from '@angular/core';\nimport { $ } from 'protractor';\nimport { IDevice } from 'src/app/interfaces';\nimport { SharedService} from 'src/app/shared.service';\n\n@Component({\n  selector: 'app-show-dev',\n  templateUrl: './show-dev.component.html',\n  styleUrls: ['./show-dev.component.css']\n})\nexport class ShowDevComponent implements OnInit {\n\n\n  constructor( private service: SharedService) { }\n\n  DeviceList  : IDevice[] = [] ;\n  //ActivateModal : boolean = false;\n  ngOnInit(): void {\n    this.getDeviceList();\n  }\n\n  // getDeviceList(){\n  //   this.service.getDevices()(data => {\n  //     this.DeviceList = data;\n  //   });\n  // }\n  getDeviceList(){\n  this.service.getDevices().subscribe(result=>{\n    this.DeviceList = result;\n      });\n    }\n  // getDeviceList(){\n  //   this.DeviceList = this.service.getDevices1();\n  //   };\n\n    addClick(){\n      //this.ActivateModal = true;\n      this.getDeviceList();\n    }\n\n    closeClick(){\n\n    }\n    assignDeviceClick(device){\n      //this.ActivateModal = true;\n\n      // this.service.login(this.model).subscribe(res=>{\n      //   alert(\"done\");\n      // });\n\n      this.service.assignedDevice(device).subscribe(res=>{\n        if(res == true)\n        {\n        alert(\"Sent request for processing. Kindly refresh to check latest device status.\");\n        }\n        else\n        {\n          alert(\"Something went wrong.\");\n        }\n      }),\n      error => {console.log(\"ere\",error)}\n      // this.service.getDevices().subscribe(res=>{\n      //   alert(\"done\");\n      // });\n    }\n\n    //Note - Implement confirmation pop up for assigning device\n}\n","<!-- Button trigger modal -->\n<button type=\"button\" class=\"btn btn-primary float-right m-2\" \ndata-toggle=\"modal\" data-target=\"#exampleModal\"\n(click)=\"addClick()\" data-backdrop=\"static\" data-keyboard=\"false\"\n>\n    Refresh\n  </button>\n  \n  <!-- Modal -->\n  <!-- <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <h5 class=\"modal-title\" id=\"exampleModalLabel\">Are you sure?</h5>\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"\n          (click)=\"closeClick()\"\n          >\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n        <div class=\"modal-body\">\n            \n          <div *ngIf=\"ActivateModal\">\n              <h2>Test modal</h2>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n          <button type=\"button\" class=\"btn btn-primary\">Confirm</button>\n        </div>\n      </div>\n    </div> \n  </div>-->\n<table class=\"table table-striped\">\n    <thead>\n        <tr>\n            <th>Device Id</th>\n            <th>Status</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let dataItem of DeviceList\">\n            <td>{{dataItem.deviceId}}</td>\n            <td>{{dataItem.status}}</td>\n            <td>\n                <button type=\"button\" class=\"btn btn-light mr-1\"\n                data-toggle=\"modal\" data-target=\"#exampleModal\"\n                (click)=\"assignDeviceClick(dataItem)\" data-backdrop=\"static\" data-keyboard=\"false\"\n                >\n                    Assign Device\n                </button>\n            </td>\n        </tr>\n    </tbody>\n</table>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport {IDevice} from 'src/app/interfaces'\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n// interface Device {\n//   DeviceId : string;\n//   Status: string\n// }\n\nexport class SharedService {\n  \n  //  devices : Device = {\n  //    DeviceId : \"a\",\n  //    Status : \"b\"\n  //  }\n\n  //  devices : IDevice[] = [\n  //    {deviceId : \"Device-1\", status : \"Assign\"},\n  //    {deviceId : \"Device-2\", status : \"Assign\"},\n  //    {deviceId : \"Device-3\", status : \"Assign\"},\n  //    {deviceId : \"Device-4\", status : \"Assign\"},\n  //    {deviceId : \"Device-5\", status : \"Assign\"}\n  //  ];\n\n// readonly APIUrl = \"http://localhost:64596/api/\";\nreadonly APIUrl = \"http://localhost:49167/api/\";\n  constructor(private http:HttpClient) { }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n\n  login(model:any):Observable<any>\n  {\n     return this.http.post<any>(this.APIUrl+'WeatherForecast/test',model,\n     {\n       headers:new HttpHeaders({'Content-Type':'application/json'})\n     });\n}\n \nassignedDevice(val: IDevice): Observable<any>{\n\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json'\n      })\n    };\n    return this.http.post<any>(this.APIUrl+'Device/AssignedDevice', val,httpOptions);\n    // return this.http.put<any>(this.APIUrl+'Device/UpdateDevice', val,httpOptions);\n  }\n  // assignedDevice(val: any): Observable<any>{\n\n  //   const httpOptions = {\n  //     headers: new HttpHeaders({\n  //       'Content-Type':  'application/json'\n  //     })\n  //   };\n  //   //const body=JSON.stringify(val);\n  //   //var param = new HttpParams().set('deviceId',\"123\");\n\n  //   const headers = { 'Content-Type': 'application/json' };\n  //   //const httpOptions = { headers: new HttpHeaders({ 'Content-Type': 'application/json' }) };\n  //   //let options = new HttpOptions({ headers: headers });\n  //   return this.http.post(this.APIUrl, \"val\");//,httpOptions);\n  //   // .pipe(\n  //   //   catchError(this.handleError('ErrorDev', val))\n  //   // );\n\n  //   //var headers = new HttpHeaders().set('Content-Type', 'application/json');\n  //   //var d = this.http.post(this.APIUrl+'/Device', '{DeviceId : \"Device-1\", Status : \"Assign\"}',{'headers':headers });\n  //   //return d;\n  // }\n  // assignedDevice(val: IDevice):Observable<IDevice>{\n  //   //var headers = new HttpHeaders().set('Content-Type', 'application/json');\n  //   //const body=JSON.stringify(val);\n  //   //alert(body);\n  //   console.log(val);\n  //   const header = {'content-type': 'application/json'};\n  //   return this.http.post<IDevice>(this.APIUrl+'/Device',val,{ headers:header });\n  //   //return d;\n  // }\n\n  // assignedDevice(val: any[]){\n  //   var d = this.http.get<any>(this.APIUrl+'/Device');\n  //   return d;\n  // }\n\n  getDevices():Observable<IDevice[]>{\n    \n    return this.http.get<any>(this.APIUrl+'Device/All');\n    //return this.devices;\n  }\n  // getDevices1():IDevice[]{\n  //   return this.devices;\n  // }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { DevicesComponent } from './devices/devices.component'\n\nconst routes: Routes = [\n  {path : 'device', component: DevicesComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}